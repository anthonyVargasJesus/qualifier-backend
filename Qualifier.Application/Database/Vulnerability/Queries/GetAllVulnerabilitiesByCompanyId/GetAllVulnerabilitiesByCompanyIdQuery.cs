using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Qualifier.Common.Application.Dto;
using Qualifier.Common.Application.Service;
using Qualifier.Domain.Entities;

namespace Qualifier.Application.Database.Vulnerability.Queries.GetAllVulnerabilitiesByCompanyId
{
    internal class GetAllVulnerabilitiesByCompanyIdQuery : IGetAllVulnerabilitiesByCompanyIdQuery
    {
        private readonly IDatabaseService _databaseService;
        private readonly IMapper _mapper;
        public GetAllVulnerabilitiesByCompanyIdQuery(IDatabaseService databaseService, IMapper mapper)
        {
            _databaseService = databaseService;
            _mapper = mapper;
        }

        public async Task<Object> Execute(int companyId)
        {
            try
            {
                var entities = await (from vulnerability in _databaseService.Vulnerability
                                      join vulnerabilityType in _databaseService.VulnerabilityType on vulnerability.vulnerabilityType equals vulnerabilityType
                                      where ((vulnerability.isDeleted == null || vulnerability.isDeleted == false) && vulnerability.companyId == companyId)
                                      select new VulnerabilityEntity
                                      {
                                          vulnerabilityId = vulnerability.vulnerabilityId,
                                          vulnerabilityTypeId = vulnerability.vulnerabilityTypeId,
                                          name = vulnerability.name,
                                          companyId = vulnerability.companyId,
                                      }).ToListAsync();

                BaseResponseDto<GetAllVulnerabilitiesByCompanyIdDto> baseResponseDto = new BaseResponseDto<GetAllVulnerabilitiesByCompanyIdDto>();
                baseResponseDto.data = _mapper.Map<List<GetAllVulnerabilitiesByCompanyIdDto>>(entities);
                return baseResponseDto;
            }
            catch (Exception)
            {
                return BaseApplication.getExceptionErrorResponse();
            }
        }

    }
}

