using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Qualifier.Common.Application.Dto;
using Qualifier.Common.Application.Service;
using Qualifier.Domain.Entities;

namespace Qualifier.Application.Database.Vulnerability.Queries.GetVulnerabilitiesByCompanyId
{
    public class GetVulnerabilitiesByCompanyIdQuery : IGetVulnerabilitiesByCompanyIdQuery
    {
        private readonly IDatabaseService _databaseService;
        private readonly IMapper _mapper;

        public GetVulnerabilitiesByCompanyIdQuery(IDatabaseService databaseService, IMapper mapper)
        {
            _databaseService = databaseService;
            _mapper = mapper;
        }
        public async Task<Object> Execute(int skip, int pageSize, string search, int companyId)
        {
            try
            {
                var entities = await (from vulnerability in _databaseService.Vulnerability
                                      join vulnerabilityType in _databaseService.VulnerabilityType on vulnerability.vulnerabilityType equals vulnerabilityType
                                      where ((vulnerability.isDeleted == null || vulnerability.isDeleted == false) && vulnerability.companyId == companyId)
                                      && (vulnerability.name.ToUpper().Contains(search.ToUpper()))
                                      select new VulnerabilityEntity
                                      {
                                          vulnerabilityId = vulnerability.vulnerabilityId,
                                          vulnerabilityTypeId = vulnerability.vulnerabilityTypeId,
                                          name = vulnerability.name,
                                          companyId = vulnerability.companyId,
                                          vulnerabilityType = new VulnerabilityTypeEntity
                                          {
                                              name = vulnerabilityType.name,
                                          },
                                      })
                .Skip(skip).Take(pageSize)
                .ToListAsync();

                BaseResponseDto<GetVulnerabilitiesByCompanyIdDto> baseResponseDto = new BaseResponseDto<GetVulnerabilitiesByCompanyIdDto>();
                baseResponseDto.data = _mapper.Map<List<GetVulnerabilitiesByCompanyIdDto>>(entities);
                baseResponseDto.pagination = Pagination.GetPagination(await getTotal(search, companyId), pageSize);
                return baseResponseDto;
            }
            catch (Exception)
            {
                return BaseApplication.getExceptionErrorResponse();
            }
        }

        public async Task<int> getTotal(string search, int companyId)
        {
            var total = await (from vulnerability in _databaseService.Vulnerability
                               join vulnerabilityType in _databaseService.VulnerabilityType on vulnerability.vulnerabilityType equals vulnerabilityType
                               where ((vulnerability.isDeleted == null || vulnerability.isDeleted == false) && vulnerability.companyId == companyId)
                               && (vulnerability.name.ToUpper().Contains(search.ToUpper()))
                               select new VulnerabilityEntity
                               {
                                   vulnerabilityId = vulnerability.vulnerabilityId,
                               }).CountAsync();
            return total;
        }

    }
}

